2017年9月27日 16:08:53

1.  源代码通过：预处理，编译，汇编，链接，生成可执行文件，windows下为PE文件，Linux下为ELF文件

2.	汇编器：将汇编代码翻译成二进制代码
	链接器：处理文件之间的
	编译器：将高级语言翻译为汇编语言

3.  静态链接器：
     把公用库内的目标文件合并到可执行文件内部，
     缺点：（1）使得可执行文件的体积变得庞大。
     	   （2）导致可执行文件难以更新。
           （3）多个程序加载后相同的公用库代码占用了多份内存空间

     动态链接器：
     	仅仅记录动态链接库的路径信息。允许程序运行前才加载所需的动态链接库，如果已加载在内存中，则不需要重复加载。
     	动态链接库也允许当动态链接库的加载延迟到程序执行库函数的那一刻。
     	缺点：（1）运行时，增加程序执行的时间开销。
     	   	  （2）动态链接库的版本错误可能会导致程序无法执行

4.  GCC工作流程：
     gcc hello.c -o hello -static --verbose  查看GCC的工作流程（系统默认static编译，所以-static可省略）

     GCC背后使用cc1,as,collect2三个命令，
     	cc1是GCC的编译器，将.c编译成.s，
     	as为汇编命令,将.s文件汇编为.o文件，
     	collect2为链接器命令，是命令ld的封装

     静态链接时，GCC将C语言运行时库（CRT）内的5个重要的目标文件crtl.o  crti.o   crtbeginT.o  crtend.o   crtn.o
     以及3个静态库libgcc.a   libgcc_eh.a   libc.a链接到可执行文件中
     
     预处理：  gcc -E hello.c -o hello.i

     编译：    gcc -S hello.i -o hello.sd	//GCC生成的汇编代码的语法是 AT&T 格式

     汇编:     gcc -c hello.s -o hello.o     //hello.o不能通过vim查看，用指令 objdump -sd hello.o 查看
     										 //汇编器在处理当前文件的过程中无法获悉符号的虚拟地址，因此临时将这些符号地址设置为默认
     										 //值0，真正的符号地址只有在链接的时候才能确定

     链接:     gcc hello.o -o hello     //可以通过objdump查看静态链接后的可执行文件内的信息
     		//GCC默认使用动态链接，需要静态链接，请加后缀-static

  
